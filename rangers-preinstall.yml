---
- name: rangers preinstall
  hosts: rangers
  vars_files:
    - vars.yml

  tasks:
  - name: set timezone
    timezone:
      name: "{{ timezone }}"

  - name: set hostname
    hostname:
      name: "{{ inventory_hostname }}"
  
  - name: /etc/hosts
    lineinfile: 
      dest: /etc/hosts 
      line: "{{ hostvars[item].ansible_host }} {{ hostvars[item]['inventory_hostname'] }}" 
      state: present
    loop: "{{ ansible_play_hosts }}"

  - name: install parted
    apt:
      name: ["parted"]
      state: present
      update_cache: yes
      install_recommends: no
    when: ansible_os_family == "Debian"

  - name: install parted
    yum:
      name: ["parted"]
      state: present
      update_cache: yes
    when: ansible_os_family == "Redhat"

  - name: new primary partition
    parted:
      device: "{{ item.device | replace('1','') }}"
      number: 1
      state: present
    loop: "{{ data_disks }}"
    loop_control:
      label: "{{ item.device }}"

  - name: format disk
    filesystem:
      fstype: ext4
      dev: "{{ item.device }}"
      force: "{{ format_confirm }}"
    when: format_confirm
    loop: "{{ data_disks }}"
    loop_control:
      label: "{{ item.device }}"
    tags: format
  
  - name: mount data_disks
    mount:
      path: "{{ item.mount_point }}"
      src: "{{ item.device }}"
      fstype: ext4
      opts: defaults
      state: mounted
    loop: "{{ data_disks }}"
    tags: mount

  - name: force ansible to regather facts(uuid)
    setup: filter='ansible_mounts'

  - name: update fstab
    replace: 
      path: /etc/fstab
      regexp: "{{ item.device }}"
      replace: "UUID={{ item.uuid }}"
      backup: yes
    loop: "{{ ansible_mounts | selectattr('mount', 'match', '^/data0[0-9]$') | list }}"
    loop_control:
      label: 
        - "{{ item.device }}"
        - "{{ item.uuid }}"
    tags: fstab

  - name: add group
    group:
      name: "{{ ranger_user.group }}"
      state: present
  
  - name: add user
    user:
      name: "{{ ranger_user.user }}"
      group: "{{ ranger_user.group }}"
      shell: /bin/bash
      system: yes
  
  - name: change password
    user:
      name: "{{ ranger_user.user }}"
      update_password: always
      password: "{{ ranger_user.password|password_hash('sha512') }}"

  - name: add sudoer
    lineinfile:
      path: /etc/sudoers.d/{{ ranger_user.user }}
      line: "{{ ranger_user.user }}    ALL=(ALL)       NOPASSWD:ALL"
      owner: root
      group: root
      mode: 0400
      create: yes
      validate: "/usr/sbin/visudo -cf %s"

  - name: create ssh dir
    file:
      path: /home/{{ ranger_user.user }}/.ssh
      state: directory
      owner: "{{ ranger_user.user }}"
      group: "{{ ranger_user.group }}"
      mode: 0755

  - name: ssh key exist ?
    stat:
      path: /home/{{ ranger_user.user }}/{{ rangers_ssh_private_key }}.pub
    register: key_exists
    delegate_to: "{{ jumper_host }}"

  - name: generate ssh key
    raw: yes y | ssh-keygen -t rsa -N '' -q -f /home/{{ ranger_user.user }}/{{ rangers_ssh_private_key }}
    become: yes
    become_user: "{{ ranger_user.user }}"
    delegate_to: "{{ jumper_host }}"
    run_once: True
    when: not key_exists.stat.exists

  - name: fetch ssh key
    fetch:
      flat: yes
      src: /home/{{ ranger_user.user }}/{{ rangers_ssh_private_key }}.pub
      dest: /tmp/{{ rangers_ssh_private_key }}.pub
      owner: "{{ ranger_user.user }}"
      group: "{{ ranger_user.group }}"
      mode: 0600
    delegate_to: "{{ jumper_host }}"

  - name: sync ssh key
    copy:
      src: /tmp/{{ rangers_ssh_private_key }}.pub
      dest: /home/{{ ranger_user.user }}/.ssh/authorized_keys
      owner: "{{ ranger_user.user }}"
      group: "{{ ranger_user.group }}"
      mode: 0600

  - name: "{{ home_link_dir }}/{{ ranger_user.user }} exists ?"
    stat:
      path: "{{ home_link_dir }}/{{ ranger_user.user }}"
    register: home_link_dest
    when: home_link
    tags: home_link

  - name: "/home/{{ ranger_user.user }} exists ?"
    stat:
      path: /home/{{ ranger_user.user }}
    register: home_link_src
    when: home_link
    tags: home_link

  - name: copy /home/{{ ranger_user.user }} to {{ home_link_dir }}/{{ ranger_user.user }}
    copy:
      src: /home/{{ ranger_user.user }}
      dest: "{{ home_link_dir }}"
      owner: "{{ ranger_user.user }}"
      group: "{{ ranger_user.group }}"
      mode: 0755
      remote_src: yes
    when: home_link_dest.stat.isdir is not defined and home_link_src.stat.isdir is defined and home_link_src.stat.isdir and home_link
    tags: home_link

  - name: rm /home/{{ ranger_user.user }}
    file: 
      path: /home/{{ ranger_user.user }}
      state: absent
    when: home_link_src.stat.isdir is defined and home_link_src.stat.isdir and home_link
    tags: home_link

  - name: "{{ home_link_dir }}/{{ ranger_user.user }} exists (again) ?"
    stat:
      path: "{{ home_link_dir }}/{{ ranger_user.user }}"
    register: home_link_dest
    when: home_link
    tags: home_link

  - name: link home dir
    file:
      src: "{{ home_link_dir }}/{{ ranger_user.user }}"
      dest: /home/{{ ranger_user.user }}
      owner: "{{ ranger_user.user }}"
      group: "{{ ranger_user.group }}"
      state: link
      force: yes
    when: home_link_dest.stat.isdir is defined and home_link_dest.stat.isdir and home_link
    tags: home_link
